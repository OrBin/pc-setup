name: Test setup
on: push
jobs:
  test:
    runs-on: ubuntu-20.04
    timeout-minutes: 45
    env:
      SSH_KEY_FILE: /tmp/id_rsa
    strategy:
      matrix:
        computer_type:
          - "work"
          - "personal"
    steps:
    - name: Install doctl
      run: sudo snap install doctl

    - name: Authenticate to doctl
      run: doctl auth init --access-token '${{ secrets.DIGITALOCEAN_PERSONAL_ACCESS_TOKEN }}'

    - name: Save SSH key and calculate fingerprint
      id: ssh_keys
      run: |
        echo '${{ secrets.DIGITALOCEAN_SSH_PRIVATE_KEY }}' > "${SSH_KEY_FILE}"
        chmod 0600 "${SSH_KEY_FILE}"
        fingerprint=$(ssh-keygen -l -f "${SSH_KEY_FILE}" -E md5 | cut -d ' ' -f 2 | cut -d ':' -f 2-)
        echo "::set-output name=fingerprint::${fingerprint}"

    - name: Build droplet name
      id: build_droplet_name
      if: ${{ always() }}
      run: |
        droplet_name="ci-${GITHUB_REPOSITORY}-${GITHUB_REF_NAME}-${GITHUB_SHA}-${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}-${{ matrix.computer_type }}"
        droplet_name="${droplet_name//[\/_]/-}" # Replace / and _ with -
        echo "::set-output name=droplet_name::${droplet_name}"

    - name: Create droplet
      id: create_droplet
      run: |
        droplet_name="${{ steps.build_droplet_name.outputs.droplet_name }}"

        create_response=$( \
          doctl compute droplet create \
            --image ubuntu-20-04-x64 \
            --size s-4vcpu-8gb \
            --region nyc1 \
            --ssh-keys "${{ steps.ssh_keys.outputs.fingerprint }}" \
            --wait \
            --output json \
            "${droplet_name}"
        )
        
        droplet_ip_address=$(jq -r '.[0].networks.v4[] | select(.type == "public").ip_address' <<< "${create_response}")
        echo "::set-output name=droplet_ip_address::${droplet_ip_address}"

    - name: Define ssh_to_droplet
      run: |
        mkdir -p "${HOME}/.local/bin" 

        echo 'ssh \
            -o StrictHostKeyChecking=no \
            "root@${{ steps.create_droplet.outputs.droplet_ip_address }}" \
            -i "${SSH_KEY_FILE}" \
            $*' > "${HOME}/.local/bin/ssh_to_droplet"
        
        chmod +x "${HOME}/.local/bin/ssh_to_droplet"
        echo "${HOME}/.local/bin" >> $GITHUB_PATH

    - name: Wait until SSH server is available and snap is ready
      run: |
        retries=0
        until [ "${retries}" -ge 30 ]; do 
          ssh_to_droplet snap && exit 0  # SSH is available
          sleep 1
          retries=$((retries+1))
        done
        exit 1  # SSH is available, fail the step

    - name: Install multipass and wait until multipass is ready
      run: |
        # Trying to run snap too early yields an error: 
        # "too early for operation, device not yet seeded or device model not acknowledged"
        sleep 5  
        ssh_to_droplet snap install multipass
        
        retries=0
        until [ "${retries}" -ge 30 ]; do 
          ssh_to_droplet multipass list && exit 0  # multipass is available
          sleep 1
          retries=$((retries+1))
        done
        exit 1  # multipass is available, fail the step


    - name: Clone repo
      id: clone
      run: |
        droplet_local_repo_path="~/${GITHUB_REPOSITORY#*\/}/"
        ssh_to_droplet git clone https://github.com/${{ github.repository }}.git "${droplet_local_repo_path}"
        ssh_to_droplet "cd ${droplet_local_repo_path} && git checkout ${{ github.sha || github.head_ref || github.ref }}"
        
        echo "::set-output name=droplet_local_repo_path::${droplet_local_repo_path}"

    - name: Test
      env:
        COMPUTER_TYPE: ${{ matrix.computer_type }}
      run: |
        ssh_to_droplet "cd ${{ steps.clone.outputs.droplet_local_repo_path }} && tests/test.sh"

    - name: Delete droplet
      if: ${{ always() }}
      run: doctl compute droplet delete ${{ steps.build_droplet_name.outputs.droplet_name }} -f
