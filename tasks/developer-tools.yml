---
- name: Download GitHub CLI GPG key public ring
  get_url:
    url: https://cli.github.com/packages/githubcli-archive-keyring.gpg
    dest: /usr/share/keyrings/githubcli-archive-keyring.gpg
    mode: "0644"
  become: yes

- name: Add GitHub CLI apt repository into sources list
  apt_repository:
    repo: "deb [arch={{packages_architecture}} signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main"
    filename: /etc/apt/sources.list.d/github-cli
    update_cache: yes
  become: yes

- name: Install developer tools (apt)
  apt:
    name:
    - gh
    - git
    - nmap
    - wireshark
    - adb
    - postgresql-client
    - pv
    state: latest
  become: yes

- name: "Evaluate GitHub CLI completion for zsh"
  shell: |
    gh completion -s zsh | tee $HOME/.gh_zsh_completion
    echo 'source $HOME/.gh_zsh_completion' >> "{{ user_zsh_completion_file_path }}"


- name: Install developer tools (snap)
  snap:
    name:
    - doctl
    - multipass
    - shellcheck
    - yq
  become: yes

- name: Connect doctl to ssh-keys interface
  shell: snap connect doctl:ssh-keys :ssh-keys
  become: yes

- name: Install Docker
  import_role:
    name: geerlingguy.docker
  vars:
    docker_apt_arch: "{{packages_architecture}}"
    docker_users:
      - "{{ansible_user_id}}"  # Self user (the user running this setup)
    ansible_distribution: "Ubuntu"
  become: yes

- name: Check dive version
  shell: dpkg -s dive | grep '^Version:' | cut -d ' ' -f 2-
  register: installed_dive_version_check_command

- name: Decide if should install dive
  set_fact:
    should_install_dive: "{{ installed_dive_version_check_command is failed or installed_dive_version_check_command.stdout == '' or installed_dive_version_check_command.stdout is version(dive_version, '<') }}"

- name: Install dive
  apt:
    deb: "https://github.com/wagoodman/dive/releases/download/v{{dive_version}}/dive_{{dive_version}}_linux_{{packages_architecture}}.deb"
  become: yes
  when: should_install_dive

- name: Install JetBrains IDEs
  snap:
    name: "{{ jetbrains_ides }}"
    classic: yes
  become: yes
  register: jetbrains_ides_installation

# TODO install IDE extensions (e.g. TabNine)

#- name: Install VS Code
#  community.general.flatpak:
#    name: com.visualstudio.code
#  when: computer_type == "work"

- name: Install Postman
  community.general.flatpak:
    name:
      - com.getpostman.Postman

- name: Download and extract AWS CLI
  unarchive:
    src: "https://awscli.amazonaws.com/awscli-exe-linux-{{ansible_architecture}}.zip"
    dest: "{{temp_dir}}"
    remote_src: yes
  register: unarchive_awscli

- name: Install AWS CLI
  shell: "{{unarchive_awscli.dest}}/aws/install --update"
  become: yes

- name: Install NodeJS
  import_role:
    name: geerlingguy.nodejs
  become: yes

- name: Install developer tools (npm)
  community.general.npm:
    name: "{{ item }}"
    global: yes
  loop:
    - yarn
    - diff-so-fancy
    - renovate
  become: yes

- name: Install Go
  import_role:
    name: geerlingguy.go
  vars:
    go_platform: linux
    go_arch: "{{ packages_architecture }}"
  become: yes

- name: Configure diff-so-fancy in git config
  git_config:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    scope: global
  loop: "{{ config | dict2items }}"
  vars:
    config:
      core.pager: "diff-so-fancy | less --tabs=4 -RFX"
      interactive.diffFilter: "diff-so-fancy --patch"
      color.ui: "true"
      color.diff-highlight.oldNormal: "red bold"
      color.diff-highlight.oldHighlight: "red bold 52"
      color.diff-highlight.newNormal: "green bold"
      color.diff-highlight.newHighlight: "green bold 22"
      color.diff.meta: "11"
      color.diff.frag: "magenta bold"
      color.diff.func: "146 bold"
      color.diff.commit: "yellow bold"
      color.diff.old: "red bold"
      color.diff.new: "green bold"
      color.diff.whitespace: "red reverse"

- name: Check latest Lens version
  uri:
    url: https://api.k8slens.dev/binaries/latest.json
  register: lens_latest_version_response

- name: Extract latest Lens version
  set_fact:
    latest_lens_version: "{{ lens_latest_version_response.json.version }}"

- name: Check installed Lens version
  shell: dpkg -s lens | grep '^Version:' | cut -d ' ' -f 2-
  register: installed_lens_version_check_command

- name: Decide if should install Lens
  set_fact:
    should_install_lens: "{{ installed_lens_version_check_command is failed or installed_lens_version_check_command.stdout == '' or installed_lens_version_check_command.stdout is version(latest_lens_version, '<') }}"

- name: Download Lens
  get_url:
    url: "https://api.k8slens.dev/binaries/Lens-{{ latest_lens_version }}.{{ packages_architecture }}.deb"
    dest: "{{temp_dir}}"
    mode: "444"
  become: yes
  when: should_install_lens
  register: download_lens

- name: Install Lens
  apt:
    deb:  "{{ download_lens.dest }}"
  become: yes
  when: should_install_lens

- name: Install developer tools (snap - classic)
  snap:
    name:
    - kubectl
    - helm
    classic: yes
  become: yes

- name: "Evaluate completions for zsh"
  shell: |
    "{{ item }}" completion zsh | tee $HOME/.{{ item }}_zsh_completion
    echo 'source $HOME/.{{ item }}_zsh_completion' >> "{{ user_zsh_completion_file_path }}"
  loop:
    - kubectl
    - helm

- name: Create temporary file for pyenv loading
  ansible.builtin.tempfile:
    state: file
  register: tempfile_for_pyenv_loading

- name: Install pyenv
  import_role:
    name: avanov.pyenv
  vars:
    pyenv_setting_path: "{{ tempfile_for_pyenv_loading.path }}"

- name: Save pyenv loading to fill in zshrc
  set_fact:
    pyenv_loading_for_zshrc: |
      {{ lookup('file', tempfile_for_pyenv_loading.path) }}
      eval "$(pyenv init --path)"

- name: Install developer tools (pip)
  pip:
    name:
      - "ansible-lint[core,community,yamllint]"
      - pre-commit
  become: yes

- name: Install Terraform
  import_role:
    name: robertdebock.terraform
  become: yes

#- name: Install snapcraft
#  snap:
#    name: snapcraft
#    classic: yes
#  when: computer_type == "work"
#  become: yes

- name: Install zsh-completions (homebrew)
  community.general.homebrew:
    name: zsh-completions
    state: present
  register: install_zsh_completions

- name: Update zsh-completions (homebrew)
  community.general.homebrew:
    name: zsh-completions
    state: latest

- name: Force-rebuild zcompdump to activate zsh completions
  shell: zsh -ic 'rm -f ~/.zcompdump; compinit'
  when: install_zsh_completions.changed

- name: Install developer tools (homebrew)
  community.general.homebrew:
    name:
    - derailed/k9s/k9s
    - fblog
    - weaveworks/tap/eksctl
    - kubectx
    - fzf
    state: latest

#- name: Get latest version of buf
#  community.general.github_release:
#    user: bufbuild
#    repo: buf
#    action: latest_release
#  register: buf_latest_release
#  when: computer_type == "work"

#- name: Download buf
#  get_url:
#    url: "https://github.com/bufbuild/buf/releases/download/{{buf_latest_release.tag}}/buf-{{ ansible_system }}-{{ ansible_userspace_architecture }}"
#    dest: /usr/local/bin/buf
#    mode: "0755"
#  become: yes
#  when: computer_type == "work"

# TODO add VirtualBox, gitignore
