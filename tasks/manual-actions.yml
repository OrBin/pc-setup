---
- name: Notify user to manually install Chrome extensions
  pause:
    prompt: |-
      Please install chrome extensions.
      Press enter to automatically open their pages on chrome

- name: Open Chrome extensions pages
  # TODO Only do this when not installed. Location may possibly depend on who installs Chrome.
  # Relevant files/directories:
  # ~/.config/google-chrome/Default/Extensions/
  # jq '.extensions.settings | keys' /home/or/.config/google-chrome/Default/Preferences
  # /home/or/.config/google-chrome/Default/Extensions/
  # /opt/google/chrome/extensions/external_extensions.json
  # /opt/google/chrome/master_preferences
  shell: "google-chrome 'https://chrome.google.com/webstore/detail/{{ item }}'"
  loop:
    - jeoacafpbcihiomhlakheieifhpjdfeo  # Disconnect
    - fihnjjcciajhdojfnbdddfaoknhalnja  # I don't care about cookies
    - bcjindcccaagfpapjjmafapmmgkkhgoa  # JSON Formatter
    - hdokiejnpimakedhajhdlcegeplioahd  # LastPass
    - laookkfknpbbblfpciffpaejjkokdgca  # Momentum
    - fjcldmjmjhkklehbacihaiopjklihlgg  # News Feed Eradicator
    - jlmafbaeoofdegohdhinkhilhclaklkp  # OctoLinker
    - bkhaagjahfmjljalopjnoealnfndnagc  # Octotree - GitHub code tree
    - hlepfoohegkhhmjieoechaddaejaokhf  # Refined GitHub
    - niloccemoadcdkdjlinkgdfekeahmflj  # Save to Pocket
    - epcnnfbjfcgphgdmggkamkmgojdagdnn  # uBlock
    - ldgiafaliifpknmgofiifianlnbgflgj  # Ugly Email
    - egmbedhkleiholijlmnlhgcflooajdnb  # Unified Docs Switcher
    - gppongmhjkpfnbhagpmjfkannfbllamg  # Wappalyzer
    - ppaojnbmmaigjmlpjaldnkgnklhicppk  # Webtime Tracker
    - pebcgebefnbdkgpkkeelbpbgijmjackb  # Kumta - Home Front Command alerts

- name: Check GitHub CLI auth status
  shell: gh auth status
  ignore_errors: yes
  register: gh_auth_status

- name: GitHub CLI authentication
  block:
    - name: Notify user to login to GitHub CLI
      pause:
        prompt: |-
          Please login to GitHub CLI.
          Press enter to start

    - name: Open Konsole for login to GitHub CLI
      shell: "konsole -e gh auth login --web --scopes admin:public_key"

  when: "{{ gh_auth_status.rc != 0 }}"

- name: stat SSH key
  stat:
    path: "{{ansible_user_dir}}/.ssh/id_rsa"
  register: stat_ssh_key

- name: SSH key creation
  block:
    - name: Request user input for SSH key passphrase
      pause:
        prompt: "Please enter passphrase for SSH key: "
      register: ssh_key_passphrase

    - name: Generate an OpenSSH keypair with the default values (4096 bits, rsa) and encrypted private key
      openssh_keypair:
        path: "{{ansible_user_dir}}/.ssh/id_rsa"
        passphrase: "{{ssh_key_passphrase}}"
        mode: "0600"
      register: ssh_key

    - name: Adding SSH key to GitHub
      shell: "gh ssh-key add {{ ssh_key.filename }} --title '{{ ansible_user_id }}@{{ ansible_hostname }} (Added by Ansible)'"
      when: "{{add_ssh_key_to_github}}"

    - name: Notify user to add public key to wherever needed
      pause:
        prompt: |-
          Please add public key to wherever needed:
            ✅ AWS
            ✅ DigitalOcean
            ✅ OctoPrint
            ✅ Home Assistant
            ✅ Any specific servers or services
          
          Press Enter to continue

  when: stat_ssh_key.stat is not defined or not stat_ssh_key.stat.exists

- name: Read git config
  git_config:
    list_all: yes
  register: git_config_result

- name: Configure git user email
  block:
    - name: Request user email for git configuration
      pause:
        prompt: "Please enter user email for git configuration: "
      register: git_user_email

    - name: Configure git user email
      git_config:
        name: user.email
        value: "{{ git_user_email.user_input }}"
        scope: global

  when: git_config_result.config_values["user.email"] is not defined

- name: Notify user to log in to Cura and restore from backup
  pause:
    prompt: |-
      Please log in to Cura and restore from backup.
      Press enter to automatically open Cura

- name: Open Cura to allow restore from backup
  shell: "cura &"
