---
# TODO notify to log in to Chrome

- name: Check GitHub CLI auth status
  shell: gh auth status
  ignore_errors: yes
  register: gh_auth_status

- name: GitHub CLI authentication
  block:
    - name: Make GitHub CLI non-interactive
      shell: "gh config set prompt disabled"

    - name: Notify user to log in to GitHub CLI
      pause:
        prompt: |-
          Please login to GitHub CLI.
          Press enter to start

    - name: Open Konsole for login to GitHub CLI
      shell: "konsole -e gh auth login --web --scopes admin:public_key"
      when: configure_kde

    - name: Open gnome-terminal for login to GitHub CLI
      shell: "gnome-terminal -- gh auth login --web --scopes admin:public_key"
      when: configure_gnome

    - name: Make GitHub CLI interactive again
      shell: "gh config set prompt disabled"

  when: gh_auth_status.rc != 0

- name: stat SSH key
  stat:
    path: "{{ ansible_user_dir }}/.ssh/id_rsa"
  register: stat_ssh_key

- name: SSH key creation
  block:
    - name: Request user input for SSH key passphrase
      pause:
        prompt: |-
          Please enter passphrase for SSH key
      register: ssh_key_passphrase

    - name: Ensure ~/.ssh directory exists
      file:
        path: "{{ ansible_user_dir }}/.ssh"
        state: directory

    - name: Generate an OpenSSH keypair with the default values (4096 bits, rsa) and encrypted private key
      openssh_keypair:
        path: "{{ ansible_user_dir }}/.ssh/id_rsa"
        comment: "{{ ansible_user_id }}@{{ ansible_hostname }}"
        passphrase: "{{ ssh_key_passphrase.user_input }}"
        mode: "0600"
      register: ssh_key

    - name: Adding SSH key to GitHub
      shell: "gh ssh-key add {{ ssh_key.filename }}.pub --title '{{ ansible_user_id }}@{{ ansible_hostname }} (Added by Ansible)'"
      when: "{{ add_ssh_key_to_github }}"

    # TODO Add to DigitalOcean

    - name: Notify user to add public key to wherever needed
      pause:
        prompt: |-
          Please add public key to wherever needed:
            ✅ AWS
            ✅ DigitalOcean
            ✅ OctoPrint
            ✅ Home Assistant
            ✅ Any specific servers or services

          Press Enter to continue

  when: stat_ssh_key.stat is not defined or not stat_ssh_key.stat.exists

- name: Read git config
  git_config:
    list_all: yes
  register: git_config_result

- name: Configure git user email
  block:
    - name: Request user email for git configuration
      pause:
        prompt: |-
          Please enter user email for git configuration
      register: git_user_email

    - name: Configure git user email
      git_config:
        name: user.email
        value: "{{ git_user_email.user_input }}"
        scope: global

  when: git_config_result.config_values["user.email"] is not defined

# TODO huh?
- name: Check if Cura is already configured
  shell: grep -iRl "Ender-3" ~/.local/share/cura/*/cura.cfg
  ignore_errors: yes
  register: cura_config_check

- name: Configure Cura
  block:
  - name: Notify user to log in to Cura and restore from backup
    pause:
      prompt: |-
        Please log in to Cura and restore from backup.
        Press enter to automatically open Cura

  - name: Open Cura to allow restore from backup
    shell: "env -u DESKTOP_SESSION -u KDE_FULL_SESSION -u XDG_CURRENT_DESKTOP cura &"
    when: cura_config_check.rc != 0 and configure_kde

- name: Check if already logged in to Spotify
  shell: grep autologin ~/.var/app/com.spotify.Client/config/spotify/prefs
  ignore_errors: yes
  register: spotify_login_check

- name: Log in to Spotify
  block:
  - name: Notify user to log in to Spotify
    pause:
      prompt: |-
        Please log in to Spotify.
        Press enter to automatically open Spotify

  - name: Open Spotify to allow restore from backup
    shell: "spotify &"
  when: spotify_login_check.rc != 0
