---
- name: Copy user zsh_completion
  copy:
    src: "{{user_zsh_completion_file_path}}"
    dest: "{{ ansible_user_dir }}/.zsh_completion"
    backup: yes

- name: Copy custom zsh theme
  copy:
    src: "{{playbook_dir}}/configuration/or.zsh-theme"
    dest: "{{ ansible_user_dir }}/.oh-my-zsh/themes/or.zsh-theme"
    mode: "0644"

- name: Update user .zshrc
  template:
    src: "{{playbook_dir}}/configuration/user_zshrc"
    dest: "{{ ansible_user_dir }}/.zshrc"
    backup: yes

- name: Update user .zprofile
  copy:
    src: "{{playbook_dir}}/configuration/user_zprofile"
    dest: "{{ ansible_user_dir }}/.zprofile"
    backup: yes
    mode: "0644"

- name: Change shell to zsh
  ansible.builtin.user:
    name: "{{ansible_user_id}}"
    shell: /bin/zsh
  become: yes

- name: Create directory for personal internal scripts
  file:
    path: "{{ ansible_user_dir }}/bin"
    state: directory

- name: Set ptrace_scope for Go debugging
  ansible.builtin.replace:
    path: /etc/sysctl.d/10-ptrace.conf
    regexp: '^(kernel\.yama\.ptrace_scope += +1)$'
    replace: 'kernel.yama.ptrace_scope = 0'
  become: yes

- name: Configure git user name
  git_config:
    name: user.name
    value: Or Bin
    scope: global

- name: Configure git aliases
  git_config:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    scope: global
  loop: "{{ config_items | dict2items }}"
  vars:
    config_items:
      alias.co: checkout
      alias.cob: checkout -b
      pull.rebase: "false"

- name: Download wallpaper
  get_url:
    url: "{{ wallpapers_s3_base_url }}/{{ wallpaper_by_computer_type[computer_type] }}"
    dest: "{{ wallpaper_path }}"
    mode: "0755"
  register: download_wallpaper
  when: configure_gnome

- name: Configure Gnome
  shell: |
    # Keyboard layouts
    gsettings set org.gnome.desktop.input-sources mru-sources "[('xkb', 'us'), ('xkb', 'il')]"
    gsettings set org.gnome.desktop.input-sources sources "[('xkb', 'us'), ('xkb', 'il')]"

    # Keyboard layout shortcuts
    gsettings set org.freedesktop.ibus.general.hotkey triggers "['<Alt>Shift_L', '<Alt>Shift_R', '<Alt>Shift']"
    gsettings set org.gnome.desktop.wm.keybindings switch-input-source "['<Alt>Shift_L', '<Alt>Shift_R', 'XF86Keyboard']"
    gsettings set org.gnome.desktop.wm.keybindings switch-input-source-backward "['<Alt>Shift_L', '<Alt>Shift_R', '<Shift>XF86Keyboard']"

    # Lock shortcut
    gsettings set org.gnome.settings-daemon.plugins.media-keys screensaver "['<Super>L']"


    gsettings set org.gnome.shell favorite-apps "['google-chrome.desktop', 'org.gnome.Nautilus.desktop', 'org.gnome.Terminal.desktop', 'com.spotify.Client.desktop']"

    gsettings set org.gnome.desktop.interface color-scheme "prefer-dark"
    gsettings set org.gnome.desktop.interface clock-format "24h"
    gsettings set org.gnome.desktop.interface clock-show-weekday true
    gsettings set org.gnome.desktop.interface show-battery-percentage true

    gsettings set org.gnome.desktop.background picture-uri "file://{{ download_wallpaper.dest }}"
    gsettings set org.gnome.desktop.background picture-uri-dark "file://{{ download_wallpaper.dest }}"

    gsettings set org.gnome.settings-daemon.plugins.color night-light-enabled "true"
    gsettings set org.gnome.settings-daemon.plugins.color night-light-last-coordinates "(32.1, 34.8)"  # Tel Aviv
    gsettings set org.gnome.settings-daemon.plugins.color night-light-schedule-automatic "true"
    gsettings set org.gnome.settings-daemon.plugins.color night-light-temperature 5500

    gsettings set org.gnome.settings-daemon.plugins.power sleep-inactive-ac-type 'nothing'  # Do not sleep automatically when charging
    gsettings set org.gnome.desktop.session idle-delay 600

    gsettings set org.gnome.shell.extensions.dash-to-dock dock-alignment "START"
    gsettings set org.gnome.shell.extensions.dash-to-dock dock-fixed "true"
    gsettings set org.gnome.shell.extensions.dash-to-dock dock-position "BOTTOM"
    gsettings set org.gnome.shell.extensions.dash-to-dock extend-height "true"
    gsettings set org.gnome.shell.extensions.dash-to-dock transparency-mode "FIXED"
    gsettings set org.gnome.shell.extensions.dash-to-dock dash-max-icon-size 30
    gsettings set org.gnome.shell.extensions.dash-to-dock background-opacity 0.9
    gsettings set org.gnome.shell.extensions.dash-to-dock click-action 'minimize-or-previews'
    gsettings set org.gnome.shell.extensions.dash-to-dock multi-monitor 'true'
    
    gsettings set org.gnome.shell.extensions.pop-cosmic show-application-menu 'true'
    gsettings set org.gnome.shell.extensions.pop-cosmic show-application-button 'false'
    gsettings set org.gnome.shell.extensions.pop-cosmic show-workspaces-button 'false'
    gsettings set org.gnome.shell.extensions.pop-cosmic clock-alignment 'CENTER'
  when: configure_gnome


# See this (hopefully) safer alternative to configuring KDE:
# https://develop.kde.org/docs/plasma/scripting/
# https://develop.kde.org/docs/plasma/scripting/examples

- name: Configure GitHub CLI
  shell: gh config set git_protocol ssh

- name: Find Cura configuration directory
  find:
    paths: "{{ ansible_user_dir }}/.local/share/cura/"
    recurse: no
    file_type: directory
    use_regex: yes
    patterns: ['[0-9\.]+']
  register: find_cura_config_dir

- name: Save Cura configuration directory
  set_fact:
    cura_config_dir: "{{ find_cura_config_dir.files[0].path }}"
  when: find_cura_config_dir.matched > 0

- name: Configure Cura
  ini_file:
    path: "{{ cura_config_dir }}/cura.cfg"
    section: "{{ item.section }}"
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  loop: "{{ cura_configuration }}"
  when: find_cura_config_dir.matched > 0

- name: Add missing Slack desktop entry
  copy:
    src: "/var/lib/snapd/desktop/applications/slack_slack.desktop"
    dest: "{{ ansible_user_dir }}/.local/share/applications/slack_slack.desktop"
  when: computer_type == "work"

- name: Set autostart directory
  set_fact:
    autostart_dir: "/etc/xdg/autostart"
  when: configure_gnome

- name: Add Slack to autostart (startup/boot)
  copy:
    src: "/var/lib/snapd/desktop/applications/slack_slack.desktop"
    dest: "{{ autostart_dir }}/slack_slack.desktop"
  when: computer_type == "work" and configure_gnome
  become: "{{ configure_gnome }}"

- name: Add Telegram Desktop to autostart (startup/boot)
  copy:
    src: "/var/lib/flatpak/app/org.telegram.desktop/current/active/export/share/applications/org.telegram.desktop.desktop"
    dest: "{{ autostart_dir }}/telegram-desktop_telegram-desktop.desktop"
  register: telegram_autostart_desktop_entry
  when: configure_gnome
  become: "{{ configure_gnome }}"

- name: Make Telegram Desktop autostart in tray
  replace:
    path: "{{ telegram_autostart_desktop_entry.dest }}"
    after: "\nExec="
    before: "\n"
    regexp: "telegram-desktop -- "
    replace: "telegram-desktop -startintray -- "
  when: configure_gnome
  become: "{{ configure_gnome }}"

- name: Initialize JetBrains IDE directories
  # Letting each IDE to run for 10 seconds to initialize its configuration directory
  shell:  "{{playbook_dir}}/configuration/initialize_ides.sh {{ jetbrains_ides_installation.snaps_installed | join(' ') }}"
  when: (jetbrains_ides_installation.snaps_installed | default([])) | length > 0

- name: Find JetBrains IDE directories
  find:
    paths: "{{ ansible_user_dir }}/.config/JetBrains/"
    file_type: directory
  register: find_jetbrains_ide_dirs_result

- name: Ensure JetBrains IDE directories and subdirectories exist
  file:
    path: "{{ item.1.path }}/{{ item.0 }}"
    state: directory
    mode: "0775"
  with_nested:
    - "{{ jetbrains_ides_configuration | map(attribute='file_path') | map('dirname') | unique }}"
    - "{{ find_jetbrains_ide_dirs_result.files }}"

- name: Ensure JetBrains IDE keymaps subdirectories exist
  file:
    path: "{{ item.path }}/keymaps"
    state: directory
    mode: "0775"
  loop: "{{ find_jetbrains_ide_dirs_result.files }}"

- name: Copy keymap to JetBrains IDE directories
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/configuration/Or_Keymap.xml"
    dest: "{{ item.path }}/keymaps/Or_Keymap.xml"
    mode: "0664"
    force: yes
  loop: "{{ find_jetbrains_ide_dirs_result.files }}"

- name: Ensure JetBrains IDE config files exist and is initialized
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/configuration/empty.xml"
    dest: "{{ item.1.path }}/{{ item.0 }}"
    mode: "0664"
    force: no
  with_nested:
    - "{{ jetbrains_ides_configuration | map(attribute='file_path') | unique }}"
    - "{{ find_jetbrains_ide_dirs_result.files }}"

- name: Configure JetBrains IDEs
  community.general.xml:
    path: "{{ item.1.path }}/{{ item.0.file_path }}"
    xpath: "{{ item.0.xpath }}"
    attribute: value
    value: "{{ item.0.value }}"
    pretty_print: yes
  with_nested:
    - "{{ jetbrains_ides_configuration }}"
    - "{{ find_jetbrains_ide_dirs_result.files }}"

- name: Ensure Chrome extensions directory exists
  ansible.builtin.file:
    path: "/opt/google/chrome/extensions"
    state: directory
    mode: "0755"
  become: yes
  register: extensions_dir

- name: Build Chrome external extensions config
  set_fact:
    chrome_external_extensions_config: "{{ chrome_external_extensions_config | default({}) | combine({item: default_chrome_extension_conf}) }}"
  loop: "{{ required_chrome_extension_ids }}"

- name: Inject Chrome external extensions
  ansible.builtin.copy:
    content: "{{ chrome_external_extensions_config | to_nice_json }}"
    dest: "{{ extensions_dir.path }}/external_extensions.json"
    mode: "0644"
    force: yes
    owner: root
    group: root
  become: yes
