---
- name: Add oh-my-bash to .bashrc
  blockinfile:
    block: "{{ lookup('file', playbook_dir + '/configuration/oh_my_bash_conf') }}"
    path: "{{ ansible_user_dir }}/.bashrc"
    backup: yes
    marker: "# {mark} ANSIBLE MANAGED BLOCK - oh-my-bash"

- name: Copy user bash_completion
  copy:
    src: "{{user_bash_completion_file_path}}"
    dest: "{{ ansible_user_dir }}/.bash_completion"
    backup: yes

- name: Copy user zsh_completion
  copy:
    src: "{{user_zsh_completion_file_path}}"
    dest: "{{ ansible_user_dir }}/.zsh_completion"
    backup: yes

- name: Update user .bashrc
  blockinfile:
    block: "{{ lookup('file', user_bashrc_file_path) }}"
    path: "{{ ansible_user_dir }}/.bashrc"
    backup: yes
    marker: "# {mark} ANSIBLE MANAGED BLOCK - user bashrc"

- name: Update user .zshrc
  blockinfile:
    block: "{{ lookup('file', user_zshrc_file_path) }}"
    path: "{{ ansible_user_dir }}/.zshrc"
    backup: yes
    marker: "# {mark} ANSIBLE MANAGED BLOCK - user zshrc"

- name: Change shell to zsh
  ansible.builtin.user:
    name: "{{ansible_user_id}}"
    shell: /bin/zsh
  become: yes

- name: Create directory for personal internal scripts
  file:
    path: "{{ ansible_user_dir }}/bin"
    state: directory

- name: Update xkbrc
  ini_file:
    path: "{{ ansible_user_dir }}/.config/kxkbrc"
    section: Layout
    option: "{{ item.key }}"
    value: "{{ item.value }}"
    no_extra_spaces: yes
  loop: "{{ layout_section | dict2items }}"
  # Not using ini lookup as input since it does not return the keys, only the values
  vars:
    layout_section:
      DisplayNames: ","
      LayoutList: "us,il"
      LayoutLoopCount: "-1"
      Model: "pc101"
      Options: "grp:alt_shift_toggle,grp:lalt_lshift_toggle"
      ResetOldOptions: "true"
      SwitchMode: "Global"
      Use: "true"
      VariantList: ","
  when: configure_kde

- name: Reload keyboard configuration
  shell: dbus-send --session /Layouts org.kde.keyboard.reloadConfig
  when: configure_kde

- name: Configure git user name
  git_config:
    name: user.name
    value: Or Bin
    scope: global

- name: Configure git aliases
  git_config:
    name: "alias.{{ item.key }}"
    value: "{{ item.value }}"
    scope: global
  loop: "{{ aliases | dict2items }}"
  vars:
    aliases:
      co: checkout

- name: Configure plasma desktop applets
  template:
    src: "{{playbook_dir}}/configuration/plasma-org.kde.plasma.desktop-appletsrc"
    dest: "{{ ansible_user_dir }}/.config/plasma-org.kde.plasma.desktop-appletsrc"
  when: configure_kde

- name: Configure KDE
  shell: |
    if [ $(kreadconfig5 --file kdeglobals --group KDE --key LookAndFeelPackage --default default) != 'org.kde.breezedark.desktop' ]; then 
      lookandfeeltool -a org.kde.breezedark.desktop
    fi

    kwriteconfig5 --file kwinrc --group TabBox --key LayoutName thumbnail_grid
    kwriteconfig5 --file kwinrc --group NightColor --key Active true
    kwriteconfig5 --file kwinrc --group NightColor --key NightTemperature 5500
    
    kwriteconfig5 --file kded5rc --group "Module-browserintegrationreminder" --key autoload false
    
    # Turn NumLock on on plasma startup
    kwriteconfig5 --file kcminputrc --group Keyboard --key NumLock "0"
    
    kwriteconfig5 --file dolphinrc --group General --key RememberOpenedTabs false
    
    #kwriteconfig5 --file kglobalshortcutsrc --group plasmashell --key "activate widget 4" "Meta+F1,none,Activate Application Launcher Widget"
    
    #kwriteconfig5 --file kglobalshortcutsrc --group kwin --key "Window Quick Tile Top" "none,none,Quick Tile Window to the Top"
    #kwriteconfig5 --file kglobalshortcutsrc --group kwin --key "Window Maximize" "Meta+Up,Meta+Up,Maximize Window"
    
    # current_activity_id=$(kreadconfig5 --file kactivitymanagerdrc --group main --key currentActivity)
    # kwriteconfig5 --file kactivitymanagerd-statsrc --group "Favorites-org.kde.plasma.kickoff.favorites.instance-4-global" --key ordering "applications:telegram-desktop_telegram-desktop.desktop,applications:org.kde.plasma-systemmonitor.desktop,applications:org.kde.kate.desktop,applications:pycharm-professional_pycharm-professional.desktop,applications:goland_goland.desktop,applications:systemsettings.desktop,applications:org.kde.discover.desktop,applications:org.kde.kcalc.desktop"
    # kwriteconfig5 --file kactivitymanagerd-statsrc --group "Favorites-org.kde.plasma.kickoff.favorites.instance-4-${current_activity_id}" --key ordering "applications:telegram-desktop_telegram-desktop.desktop,applications:org.kde.plasma-systemmonitor.desktop,applications:org.kde.kate.desktop,applications:pycharm-professional_pycharm-professional.desktop,applications:goland_goland.desktop,applications:systemsettings.desktop,applications:org.kde.discover.desktop,applications:org.kde.kcalc.desktop"
    
    kwin_x11 --replace &
    (timeout 5 kquitapp5 kglobalaccel5 || killall kglobalaccel5 || true) && sleep 2s && kstart5 kglobalaccel5
    (timeout 5 kquitapp5 plasmashell || killall plasmashell || true) && kstart5 plasmashell
  when: configure_kde

# See this (hopefully) safer alternative to configuring KDE:
# https://develop.kde.org/docs/plasma/scripting/
# https://develop.kde.org/docs/plasma/scripting/examples

- name: Configure GitHub CLI
  shell: gh config set git_protocol ssh

- name: Find Cura configuration directory
  find:
    paths: "{{ ansible_user_dir }}/.local/share/cura/"
    recurse: no
    file_type: directory
    use_regex: yes
    patterns: ['[0-9\.]+']
  register: find_cura_config_dir

- name: Save Cura configuration directory
  set_fact:
    cura_config_dir: "{{ find_cura_config_dir.files[0].path }}"
  when: find_cura_config_dir.matched > 0

- name: Configure Cura
  ini_file:
    path: "{{ cura_config_dir }}/cura.cfg"
    section: "{{ item.section }}"
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  loop: "{{ cura_configuration }}"
  when: find_cura_config_dir.matched > 0

- name: Ensure autostart directory exists
  file:
    path: "{{ ansible_user_dir }}/.config/autostart"
    state: directory

- name: Add Slack to autostart (startup/boot)
  copy:
    src: "/var/lib/snapd/desktop/applications/slack_slack.desktop"
    dest: "{{ ansible_user_dir }}/.config/autostart/slack_slack.desktop"
  when: computer_type == "work"

- name: Add Telegram Desktop to autostart (startup/boot)
  copy:
    src: "/var/lib/snapd/desktop/applications/telegram-desktop_telegram-desktop.desktop"
    dest: "{{ ansible_user_dir }}/.config/autostart/telegram-desktop_telegram-desktop.desktop"
  register: telegram_autostart_desktop_entry

- name: Make Telegram Desktop autostart in tray
  replace:
    path: "{{ telegram_autostart_desktop_entry.dest }}"
    after: "\nExec="
    before: "\n"
    regexp: "telegram-desktop -- "
    replace: "telegram-desktop -startintray -- "

- name: Initialize JetBrains IDE directories
  # Letting each IDE to run for 10 seconds to initialize its configuration directory
  shell:  "{{playbook_dir}}/configuration/initialize_ides.sh 10s {{ jetbrains_ides | join(' ') }}"

- name: Find JetBrains IDE directories
  find:
    paths: "{{ ansible_user_dir }}/.config/JetBrains/"
    file_type: directory
  register: find_jetbrains_ide_dirs_result

- name: Ensure JetBrains IDE directories and subdirectories exist
  file:
    path: "{{ item.1.path }}/{{ item.0 }}"
    state: directory
    mode: "0775"
  with_nested:
    - "{{ jetbrains_ides_configuration | map(attribute='file_path') | map('dirname') | unique }}"
    - "{{ find_jetbrains_ide_dirs_result.files }}"

- name: Ensure JetBrains IDE keymaps subdirectories exist
  file:
    path: "{{ item.path }}/keymaps"
    state: directory
    mode: "0775"
  loop: "{{ find_jetbrains_ide_dirs_result.files }}"

- name: Copy keymap to JetBrains IDE directories
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/configuration/Or_Keymap.xml"
    dest: "{{ item.path }}/keymaps/Or_Keymap.xml"
    mode: "0664"
    force: yes
  loop: "{{ find_jetbrains_ide_dirs_result.files }}"

- name: Ensure JetBrains IDE config files exist and is initialized
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/configuration/empty.xml"
    dest: "{{ item.1.path }}/{{ item.0 }}"
    mode: "0664"
    force: no
  with_nested:
    - "{{ jetbrains_ides_configuration | map(attribute='file_path') | unique }}"
    - "{{ find_jetbrains_ide_dirs_result.files }}"

- name: Configure JetBrains IDEs
  community.general.xml:
    path: "{{ item.1.path }}/{{ item.0.file_path }}"
    xpath: "{{ item.0.xpath }}"
    attribute: value
    value: "{{ item.0.value }}"
    pretty_print: yes
  with_nested:
    - "{{ jetbrains_ides_configuration }}"
    - "{{ find_jetbrains_ide_dirs_result.files }}"
